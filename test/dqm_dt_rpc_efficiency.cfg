
process testDQMRPCEfficiency = {

#   source = EmptySource {
#      untracked int32 maxEvents = 1
#   }


	source = PoolSource{
			    ## _Input_ ##
#    			    untracked vstring fileNames = {"file:~/scratch0/dt_rpc_digi.root"}
#                            untracked vstring fileNames = 
#                                          {"file:../../../EventFilter/RPCRawToDigi/test/RPCDigiHits3596.root"}

#                           untracked vstring fileNames =
#{'file:/afs/cern.ch/cms/Physics/muon/CMSSW/DT/samples/2006-08-21/MuonRecHit.root'}
                            untracked vstring fileNames = 
                                          {'rfio:$CASTOR_HOME/MTCC/3596/root/rpc_dt_rec.00003596.000.root',
                                           'rfio:$CASTOR_HOME/MTCC/3596/root/rpc_dt_rec.00003596.001.root',
                                           'rfio:$CASTOR_HOME/MTCC/3596/root/rpc_dt_rec.00003596.002.root',
                                           'rfio:$CASTOR_HOME/MTCC/3596/root/rpc_dt_rec.00003596.003.root',
                                           'rfio:$CASTOR_HOME/MTCC/3596/root/rpc_dt_rec.00003596.004.root'
                                          }

	   		    untracked int32 maxEvents = 3000
			    untracked uint32 debugVebosity = 1
	                    untracked bool   debugFlag     = true
  		 	   }

#	service = MessageLogger {
#			   untracked vstring destinations = {"warning.txt","error.txt","stndoutput.txt"}
#			   untracked PSet warning.txt     = { untracked string threshold = "WARNING" }
#			   untracked PSet error.txt       = { untracked string threshold = "ERROR"   }
#			   untracked PSet stndoutput.txt  = { untracked string threshold = "INFO"    }
#	
#			   untracked vstring fwkJobReports = {"FrameworkJobReport.xml"}
#			   untracked vstring categories = { "FwkJob" }
#			   untracked PSet FrameworkJobReport.xml = {
#	        		                     untracked PSet default = { untracked int32 limit = 0 }
#	                        		     untracked PSet FwkJob = { untracked int32 limit = 10000000 }
#	                        		}
#				}
##### with Rafaello




###############  DQM Efficiency Module ##################################

	

	module rpceffidqm = RPCMonitorEfficiency{

		untracked string moduleLogName = "EfficiencyModule"
		untracked bool   EfficDQMSaveRootFile = false
		untracked int32 	 EfficEventsInterval = 100
		string recHits4DLabel = 	"dt4DSegments"

                string RootFileNameEfficiency="RPCMonitorEfficiency.root"
		untracked bool  EffSaveRootFile  = true 
                untracked int32  EffSaveRootFileEventsInterval  = 100 
                untracked string EffRootFileName  = "/tmp/trentad/RPCEfficiency0_4New.root"


		string digiLabel = "rpcunpacker"
#               string digiLabel = "muonRPCDigis"
                string HistoOutFile = "HistoProva.root"
	}	

        include "MagneticField/Engine/data/volumeBasedMagneticField.cfi"
        include "Geometry/MuonCommonData/data/muonIdealGeometryXML.cfi"
	include "Geometry/CommonDetUnit/data/bareGlobalTrackingGeometry.cfi"
        include "Geometry/DTGeometry/data/dtGeometry.cfi"
        include "Geometry/RPCGeometry/data/rpcGeometry.cfi"
	include "RecoMuon/DetLayers/data/muonDetLayerGeometry.cfi"
#	es_module = GlobalTrackingGeometryESProducer { }
 	es_module = Chi2MeasurementEstimatorESProducer {
    		string ComponentName = "Chi2MeasurementEstimator"
    		double MaxChi2 = 25.
    		double nSigma = 3.
  	}	
	es_module = StraightLinePropagatorESProducer{
    		string ComponentName = "StraightLinePropagator"
		string PropagationDirection = "anyDirection"	

	}
#	es_module = MuonDetLayerGeometryESProducer { }	
#################    Data Quality Monitoring   #########################

        
	service = DaqMonitorROOTBackEnd{}
	include "DQMServices/Daemon/test/data/dqm_monitorDaemon.cfi"
	replace MonitorDaemon.AutoInstantiate = false
	replace MonitorDaemon.DestinationAddress ="lxplus063.cern.ch"

##########################################################################	
	


	## _ExecPath_ ##
	
	path p = {rpceffidqm}

#	endpath this_is_the_end = {out}
}
